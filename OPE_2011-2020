options(java.parameters = "- Xmx1024m")
source("C:/Users/aresovsk/Documents/R/main.R")

#############################################################################


## 1. Read in the 2011-2019 data and subset dates
  OPE_co2_2011_2019 <- readRDS('C:/Users/aresovsk/ICOS_data/hourly/OPE_2011-2019_co2_120m.rds')
  OPE_co2_2011_2019$sampling_datetime <- as.POSIXct(OPE_co2_2011_2019$sampling_datetime, format="%Y-%m-%d %H:%M:%OS", tz="GMT")
  
  OPE_co2_2011_2019 <- OPE_co2_2011_2019[OPE_co2_2011_2019$sampling_datetime < "2019-05-01",]
  OPE_co2_2011_2019$sampling_datetime <- OPE_co2_2011_2019$sampling_datetime + 7200
  
  OPE_co2_2011_2019 <- OPE_co2_2011_2019[,c(11,13)]
  
  
## 2. Read in the NRT growing data for the past year
  ## Fix missing dates
  hourly <- data.frame(seq(OPE_co2_2011_2019$sampling_datetime[1], as.POSIXct("2019-05-01 00:00:00", tz="GMT"), 
                           by="hour"))
  colnames(hourly) <- c("sampling_datetime")
  hourly$concentration <- NA
  df <- hourly
  for (i in 1:nrow(df)) {  
    if (df$sampling_datetime[i] %in% OPE_co2_2011_2019$sampling_datetime) {
      df$concentration[i] <- OPE_co2_2011_2019$concentration[which(df$sampling_datetime[i] == OPE_co2_2011_2019$sampling_datetime)]
    }
  }
  OPE_co2_2011_2019 <- df
  
  ## Read in NRT data
  pastyear.hourly <- data.frame(seq(as.POSIXct("2019-05-01 00:00:00", tz="GMT"), as.POSIXct("2020-03-24 23:00:00", tz="GMT"), 
                                    by="hour"))
  colnames(pastyear.hourly) <- c("sampling_datetime")
  pastyear.hourly$concentration <- NA
  
  OPE_co2_NRT <- read.xlsx('C:/Users/aresovsk/ICOS_data/ICOS_NRT_growing_20200325/ICOS_ATC_NRT_OPE_2019-05-01_2020-03-24_120.0_CO2.xlsx',
                           sheetIndex = "hourly", header=TRUE)
  OPE_co2_NRT$sampling_datetime <- as.POSIXct(OPE_co2_NRT$sampling_datetime, format="%Y-%m-%d %H:%M:%OS", tz="GMT")
  OPE_co2_NRT <- zero.to.na(OPE_co2_NRT)
  df <- pastyear.hourly
  for (i in 1:nrow(df)) {
    if (df$sampling_datetime[i] %in% OPE_co2_NRT$sampling_datetime) {
      df$concentration[i] <- OPE_co2_NRT$concentration[which(df$sampling_datetime[i] == OPE_co2_NRT$sampling_datetime)]
    }
  }
  OPE_co2_NRT <- df
  
  ## Concatenate
  OPE_co2_NRT <- rbind(OPE_co2_2011_2019, OPE_co2_NRT)
  
  
## 3. Aggregate hourly to daily
  OPE_co2_NRT$Date <- as.Date(OPE_co2_NRT$sampling_datetime, "%Y-%m-%d", tz="GMT")
  OPE_co2_NRT_daily <- aggregate(concentration ~ Date, OPE_co2_NRT, mean, na.rm=TRUE, na.action=na.pass)
  OPE_co2_NRT_daily <- NaN.to.na(OPE_co2_NRT_daily)
  colnames(OPE_co2_NRT_daily) <- c("sampling_datetime", "concentration")
  OPE_co2_NRT_daily$sampling_datetime <- as.POSIXct(OPE_co2_NRT_daily$sampling_datetime, format="%Y-%m-%d", tz="GMT")
  OPE_co2_NRT_daily$sampling_datetime <- round(OPE_co2_NRT_daily$sampling_datetime, units = "days")
  OPE_co2_NRT_daily$sampling_datetime <- as.POSIXct(OPE_co2_NRT_daily$sampling_datetime, format="%Y-%m-%d", tz="GMT")
  OPE_co2_NRT_daily$concentration <- na_interpolation(OPE_co2_NRT_daily$concentration)
  
  
## 4. Extract the 90-day, 30-day and 15-day ccgvu curves
  colNames <- c("func","poly","smooth","trend","detrend","smcycle","harm","res","smres","trres","ressm","gr")
  
  ccgvu_90d_OPE <- getCcgcrv(OPE_co2_NRT_daily, "sampling_datetime", "concentration", 
                             ccgcrvParameters="-all -short\ 90", merge=FALSE, colNames=colNames)
  ccgvu_30d_OPE <- getCcgcrv(OPE_co2_NRT_daily, "sampling_datetime", "concentration", 
                             ccgcrvParameters="-all -short\ 30", merge=FALSE, colNames=colNames)
  ccgvu_15d_OPE <- getCcgcrv(OPE_co2_NRT_daily, "sampling_datetime", "concentration", 
                             ccgcrvParameters="-all -short\ 15", merge=FALSE, colNames=colNames)
  
  ## Round dates
  ccgvu_90d_OPE$sampling_datetime <- round_date(ccgvu_90d_OPE$sampling_datetime, unit = "day")
  ccgvu_30d_OPE$sampling_datetime <- round_date(ccgvu_30d_OPE$sampling_datetime, unit = "day")
  ccgvu_15d_OPE$sampling_datetime <- round_date(ccgvu_15d_OPE$sampling_datetime, unit = "day")
  
  
## 5. Calculate delta-C values  
  ## 90 days
  ccgvu_90d_OPE$ccgvu.dC <- NA
  for (i in 1:nrow(ccgvu_90d_OPE)) {
    ccgvu_90d_OPE$ccgvu.dC[i] <- ccgvu_90d_OPE$smcycle[i] - ccgvu_90d_OPE$harm[i]
  }
  
  ## 30 days
  ccgvu_30d_OPE$ccgvu.dC <- NA
  for (i in 1:nrow(ccgvu_30d_OPE)) {
    ccgvu_30d_OPE$ccgvu.dC[i] <- ccgvu_30d_OPE$smcycle[i] - ccgvu_30d_OPE$harm[i]
  }
  
  ## 15 days
  ccgvu_15d_OPE$ccgvu.dC <- NA
  for (i in 1:nrow(ccgvu_15d_OPE)) {
    ccgvu_15d_OPE$ccgvu.dC[i] <- ccgvu_15d_OPE$smcycle[i] - ccgvu_15d_OPE$harm[i]
  }
  
  
## 6. Calculate season-adjusted sigma values 
  ccgvu_90d_OPE$sd <- seasonal_sigma(ccgvu_90d_OPE, ndays=731)
  ccgvu_30d_OPE$sd <- seasonal_sigma(ccgvu_30d_OPE, ndays=731)
  ccgvu_15d_OPE$sd <- seasonal_sigma(ccgvu_15d_OPE, ndays=731)
  
  ccgvu_90d_OPE$plus.sigma <- NA
  ccgvu_90d_OPE$minus.sigma <- NA
  ccgvu_30d_OPE$plus.sigma <- NA
  ccgvu_30d_OPE$minus.sigma <- NA
  ccgvu_15d_OPE$plus.sigma <- NA
  ccgvu_15d_OPE$minus.sigma <- NA
  for (i in (nrow(ccgvu_90d_OPE)-731):nrow(ccgvu_90d_OPE)) {
    ccgvu_90d_OPE$plus.sigma[i] <- ccgvu_90d_OPE$harm[i] + ccgvu_90d_OPE$trend[i] + ccgvu_90d_OPE$sd[i]
    ccgvu_90d_OPE$minus.sigma[i] <- ccgvu_90d_OPE$harm[i] + ccgvu_90d_OPE$trend[i] - ccgvu_90d_OPE$sd[i]
    ccgvu_30d_OPE$plus.sigma[i] <- ccgvu_30d_OPE$harm[i] + ccgvu_30d_OPE$trend[i] + ccgvu_30d_OPE$sd[i]
    ccgvu_30d_OPE$minus.sigma[i] <- ccgvu_30d_OPE$harm[i] + ccgvu_30d_OPE$trend[i] - ccgvu_30d_OPE$sd[i]
    ccgvu_15d_OPE$plus.sigma[i] <- ccgvu_15d_OPE$harm[i] + ccgvu_15d_OPE$trend[i] + ccgvu_15d_OPE$sd[i]
    ccgvu_15d_OPE$minus.sigma[i] <- ccgvu_15d_OPE$harm[i] + ccgvu_15d_OPE$trend[i] - ccgvu_15d_OPE$sd[i]
  }
  
  ## Make smoothed curves
  OPE_90d_smoothed <- loess.sm(ccgvu_90d_OPE, "sampling_datetime", "orig", span=(90/nrow(ccgvu_90d_OPE)))
  OPE_30d_smoothed <- loess.sm(ccgvu_30d_OPE, "sampling_datetime", "orig", span=(30/nrow(ccgvu_30d_OPE)))
  OPE_15d_smoothed <- loess.sm(ccgvu_15d_OPE, "sampling_datetime", "orig", span=(15/nrow(ccgvu_15d_OPE)))
  
  
## 7. Identify seasonal and synoptic-scale anomalies 
  OPE_90d_smoothed$SSE <- NA
  for (i in (nrow(OPE_90d_smoothed)-731):nrow(OPE_90d_smoothed)) {
    if ((OPE_90d_smoothed$smoothed[i] >= ccgvu_90d_OPE$plus.sigma[i]) |
        (OPE_90d_smoothed$smoothed[i] <= ccgvu_90d_OPE$minus.sigma[i])) {
      OPE_90d_smoothed$SSE[i] <- OPE_90d_smoothed$smoothed[i]
    }
  }
  OPE_30d_smoothed$SSE <- NA
  for (i in (nrow(OPE_30d_smoothed)-730):(nrow(OPE_30d_smoothed)-1)) {
    if (((OPE_30d_smoothed$smoothed[i] >= ccgvu_30d_OPE$plus.sigma[i]) & (OPE_30d_smoothed$smoothed[i-1] >= ccgvu_30d_OPE$plus.sigma[i-1])) |
        ((OPE_30d_smoothed$smoothed[i] >= ccgvu_30d_OPE$plus.sigma[i]) & (OPE_30d_smoothed$smoothed[i+1] >= ccgvu_30d_OPE$plus.sigma[i+1])) |
        ((OPE_30d_smoothed$smoothed[i] <= ccgvu_30d_OPE$minus.sigma[i]) & (OPE_30d_smoothed$smoothed[i-1] <= ccgvu_30d_OPE$minus.sigma[i-1]))  |
        ((OPE_30d_smoothed$smoothed[i] <= ccgvu_30d_OPE$minus.sigma[i]) & (OPE_30d_smoothed$smoothed[i+1] <= ccgvu_30d_OPE$minus.sigma[i+1]))) {
      OPE_30d_smoothed$SSE[i] <- OPE_30d_smoothed$smoothed[i]
    }
  }
  OPE_15d_smoothed$SSE <- NA
  for (i in (nrow(OPE_15d_smoothed)-730):(nrow(OPE_15d_smoothed)-1)) {
    if (((OPE_15d_smoothed$smoothed[i] >= ccgvu_15d_OPE$plus.sigma[i]) & (OPE_15d_smoothed$smoothed[i-1] >= ccgvu_15d_OPE$plus.sigma[i-1])) |
        ((OPE_15d_smoothed$smoothed[i] >= ccgvu_15d_OPE$plus.sigma[i]) & (OPE_15d_smoothed$smoothed[i+1] >= ccgvu_15d_OPE$plus.sigma[i+1])) |
        ((OPE_15d_smoothed$smoothed[i] <= ccgvu_15d_OPE$minus.sigma[i]) & (OPE_15d_smoothed$smoothed[i-1] <= ccgvu_15d_OPE$minus.sigma[i-1]))  |
        ((OPE_15d_smoothed$smoothed[i] <= ccgvu_15d_OPE$minus.sigma[i]) & (OPE_15d_smoothed$smoothed[i+1] <= ccgvu_15d_OPE$minus.sigma[i+1]))) {
      OPE_15d_smoothed$SSE[i] <- OPE_15d_smoothed$smoothed[i]
    }
  }
  
  
## 8. Extract seasonal anomalies
  OPE_90d_smoothed$SA <- 0
  for (i in (nrow(OPE_90d_smoothed)-731):nrow(OPE_90d_smoothed)) {
    if (!is.na(OPE_90d_smoothed$SSE[i])) {
      if (OPE_90d_smoothed$smoothed[i] >= ccgvu_90d_OPE$plus.sigma[i]) {
        OPE_90d_smoothed$SA[i] <- OPE_90d_smoothed$smoothed[i] - ccgvu_90d_OPE$plus.sigma[i]
      } else if (OPE_90d_smoothed$smoothed[i] <= ccgvu_90d_OPE$minus.sigma[i]) {
        OPE_90d_smoothed$SA[i] <-  OPE_90d_smoothed$smoothed[i] - ccgvu_90d_OPE$minus.sigma[i]
      } 
    }
  }
  
  
# 9. Extract SSAs
  OPE_15d_smoothed$SA <- 0
  for (i in (nrow(OPE_15d_smoothed)-366):nrow(OPE_90d_smoothed)) {
    if (!is.na(OPE_15d_smoothed$SSE[i])) {
      if (OPE_15d_smoothed$smoothed[i] >= ccgvu_15d_OPE$plus.sigma[i]) {
        OPE_15d_smoothed$SA[i] <- OPE_15d_smoothed$smoothed[i] - ccgvu_15d_OPE$plus.sigma[i]
      } else if (OPE_15d_smoothed$smoothed[i] <= ccgvu_15d_OPE$minus.sigma[i]) {
        OPE_15d_smoothed$SA[i] <-  OPE_15d_smoothed$smoothed[i] - ccgvu_15d_OPE$minus.sigma[i]
      } 
    }
  }
  OPE_30d_smoothed$SA <- 0
  for (i in (nrow(OPE_30d_smoothed)-366):nrow(OPE_90d_smoothed)) {
    if (!is.na(OPE_30d_smoothed$SSE[i])) {
      if (OPE_30d_smoothed$smoothed[i] >= ccgvu_30d_OPE$plus.sigma[i]) {
        OPE_30d_smoothed$SA[i] <- OPE_30d_smoothed$smoothed[i] - ccgvu_30d_OPE$plus.sigma[i]
      } else if (OPE_30d_smoothed$smoothed[i] <= ccgvu_30d_OPE$minus.sigma[i]) {
        OPE_30d_smoothed$SA[i] <-  OPE_30d_smoothed$smoothed[i] - ccgvu_30d_OPE$minus.sigma[i]
      } 
    }
  }
  
  # Count SSAs extracted at 15 and 30 days
  n <- 0
  for (i in (nrow(OPE_15d_smoothed)-366):nrow(OPE_15d_smoothed)) {
    if ((!is.na(OPE_15d_smoothed$SSE[i])) & (is.na(OPE_15d_smoothed$SSE[i+1]))) {
      n <- n + 1
      SSAs.15day <- n
    } 
  }
  if (!is.na(OPE_15d_smoothed$SSE[i])) {
    n <- n + 1
    SSAs.15day <- n
  }
  n <- 0
  for (i in (nrow(OPE_30d_smoothed)-366):nrow(OPE_30d_smoothed)) {
    if ((!is.na(OPE_30d_smoothed$SSE[i])) & (is.na(OPE_30d_smoothed$SSE[i+1]))) {
      n <- n + 1
      SSAs.30day <- n
    } 
  }
  if (!is.na(OPE_30d_smoothed$SSE[i])) {
    n <- n + 1
    SSAs.30day <- n
  }
  print(SSAs.15day)
  print(SSAs.30day)
  
  # Identify postive and negative anomalies
  OPE_90d_smoothed$SA_pos <- NA
  OPE_90d_smoothed$SA_neg <- NA
  for (i in (nrow(OPE_90d_smoothed)-366):nrow(OPE_90d_smoothed)) {
    if (OPE_90d_smoothed$SA[i] > 0) {
      OPE_90d_smoothed$SA_pos[i] <- OPE_90d_smoothed$SA[i]
    } else if (OPE_90d_smoothed$SA[i] < 0) {
      OPE_90d_smoothed$SA_neg[i] <- OPE_90d_smoothed$SA[i]
    }
  }
  OPE_15d_smoothed$SA_pos <- NA
  OPE_15d_smoothed$SA_neg <- NA
  for (i in (nrow(OPE_15d_smoothed)-366):nrow(OPE_15d_smoothed)) {
    if (OPE_15d_smoothed$SA[i] > 0) {
      OPE_15d_smoothed$SA_pos[i] <- OPE_15d_smoothed$SA[i]
    } else if (OPE_15d_smoothed$SA[i] < 0) {
      OPE_15d_smoothed$SA_neg[i] <- OPE_15d_smoothed$SA[i]
    }
  }
  OPE_30d_smoothed$SA_pos <- NA
  OPE_30d_smoothed$SA_neg <- NA
  for (i in (nrow(OPE_30d_smoothed)-366):nrow(OPE_30d_smoothed)) {
    if (OPE_30d_smoothed$SA[i] > 0) {
      OPE_30d_smoothed$SA_pos[i] <- OPE_30d_smoothed$SA[i]
    } else if (OPE_30d_smoothed$SA[i] < 0) {
      OPE_30d_smoothed$SA_neg[i] <- OPE_30d_smoothed$SA[i]
    }
  }
